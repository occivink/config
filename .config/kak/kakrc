set global startup_info_version 999999999

# to ease development of plugins
# try to load from cwd, otherwise load from config
# potentially dangerous
# also not ideal since errors from sourcing are silenced
def -hidden source-here-or-in -params 2 %{
     try %{ source "%arg{1}" } catch %{ source "%arg{2}/%arg{1}" }
     #source "%arg{2}/%arg{1}"
}

# load first 'init.kak' file found when going up directories
# equally dangerous, but practical
hook global KakBegin .* %{
    eval %sh{
        while :; do
            if test -f init.kak; then
                dir=$(printf '%s' "$PWD" | sed "s|'|''|g")
                printf "source '%s' '%s'" "$dir/init.kak" "$dir"
                exit
            fi
            test "$PWD" = / && exit
            cd ..
        done
    }
}

decl -hidden bool gdb_debug true

 source-here-or-in autorestore.kak      "%val{runtime}/rc/tools"
#source-here-or-in autowrap.kak         "%val{runtime}/rc/tools"
#source-here-or-in clang.kak            "%val{runtime}/rc/tools"
 source-here-or-in comment.kak          "%val{runtime}/rc/tools"
 source-here-or-in ctags.kak            "%val{runtime}/rc/tools"
 source-here-or-in doc.kak              "%val{runtime}/rc/tools"
 source-here-or-in format.kak           "%val{runtime}/rc/tools"
 source-here-or-in git.kak              "%val{runtime}/rc/tools"
 source-here-or-in grep.kak             "%val{runtime}/rc/tools"
#source-here-or-in lint.kak             "%val{runtime}/rc/tools"
 source-here-or-in make.kak             "%val{runtime}/rc/tools"
 source-here-or-in man.kak              "%val{runtime}/rc/tools"
 source-here-or-in spell.kak            "%val{runtime}/rc/tools"
#source-here-or-in jedi.kak             "%val{runtime}/rc/tools/python"
#source-here-or-in go-tools.kak         "%val{runtime}/rc/tools/go"
#source-here-or-in racer.kak            "%val{runtime}/rc/tools/rust"

 source-here-or-in arch-linux.kak       "%val{runtime}/rc/filetype"
 source-here-or-in asciidoc.kak         "%val{runtime}/rc/filetype"
#source-here-or-in cabal.kak            "%val{runtime}/rc/filetype"
 source-here-or-in c-family.kak         "%val{runtime}/rc/filetype"
#source-here-or-in clojure.kak          "%val{runtime}/rc/filetype"
 source-here-or-in cmake.kak            "%val{runtime}/rc/filetype"
#source-here-or-in coffee.kak           "%val{runtime}/rc/filetype"
#source-here-or-in css.kak              "%val{runtime}/rc/filetype"
#source-here-or-in cucumber.kak         "%val{runtime}/rc/filetype"
#source-here-or-in dart.kak             "%val{runtime}/rc/filetype"
 source-here-or-in diff.kak             "%val{runtime}/rc/filetype"
#source-here-or-in d.kak                "%val{runtime}/rc/filetype"
#source-here-or-in dockerfile.kak       "%val{runtime}/rc/filetype"
#source-here-or-in elixir.kak           "%val{runtime}/rc/filetype"
#source-here-or-in elm.kak              "%val{runtime}/rc/filetype"
 source-here-or-in etc.kak              "%val{runtime}/rc/filetype"
#source-here-or-in exherbo.kak          "%val{runtime}/rc/filetype"
#source-here-or-in fish.kak             "%val{runtime}/rc/filetype"
#source-here-or-in gas.kak              "%val{runtime}/rc/filetype"
 source-here-or-in git.kak              "%val{runtime}/rc/filetype"
 source-here-or-in go.kak               "%val{runtime}/rc/filetype"
#source-here-or-in haml.kak             "%val{runtime}/rc/filetype"
#source-here-or-in haskell.kak          "%val{runtime}/rc/filetype"
#source-here-or-in hbs.kak              "%val{runtime}/rc/filetype"
#source-here-or-in html.kak             "%val{runtime}/rc/filetype"
#source-here-or-in i3.kak               "%val{runtime}/rc/filetype"
#source-here-or-in ini.kak              "%val{runtime}/rc/filetype"
#source-here-or-in java.kak             "%val{runtime}/rc/filetype"
 source-here-or-in javascript.kak       "%val{runtime}/rc/filetype"
 source-here-or-in json.kak             "%val{runtime}/rc/filetype"
#source-here-or-in julia.kak            "%val{runtime}/rc/filetype"
#source-here-or-in just.kak             "%val{runtime}/rc/filetype"
 source-here-or-in kakrc.kak            "%val{runtime}/rc/filetype"
#source-here-or-in kickstart.kak        "%val{runtime}/rc/filetype"
#source-here-or-in latex.kak            "%val{runtime}/rc/filetype"
#source-here-or-in lisp.kak             "%val{runtime}/rc/filetype"
 source-here-or-in lua.kak              "%val{runtime}/rc/filetype"
#source-here-or-in mail.kak             "%val{runtime}/rc/filetype"
 source-here-or-in makefile.kak         "%val{runtime}/rc/filetype"
 source-here-or-in markdown.kak         "%val{runtime}/rc/filetype"
#source-here-or-in mercurial.kak        "%val{runtime}/rc/filetype"
#source-here-or-in moon.kak             "%val{runtime}/rc/filetype"
#source-here-or-in nim.kak              "%val{runtime}/rc/filetype"
#source-here-or-in ocaml.kak            "%val{runtime}/rc/filetype"
 source-here-or-in perl.kak             "%val{runtime}/rc/filetype"
#source-here-or-in php.kak              "%val{runtime}/rc/filetype"
#source-here-or-in pony.kak             "%val{runtime}/rc/filetype"
#source-here-or-in protobuf.kak         "%val{runtime}/rc/filetype"
#source-here-or-in pug.kak              "%val{runtime}/rc/filetype"
 source-here-or-in python.kak           "%val{runtime}/rc/filetype"
#source-here-or-in ragel.kak            "%val{runtime}/rc/filetype"
 source-here-or-in restructuredtext.kak "%val{runtime}/rc/filetype"
#source-here-or-in ruby.kak             "%val{runtime}/rc/filetype"
 source-here-or-in rust.kak             "%val{runtime}/rc/filetype"
#source-here-or-in sass.kak             "%val{runtime}/rc/filetype"
#source-here-or-in scala.kak            "%val{runtime}/rc/filetype"
#source-here-or-in scheme.kak           "%val{runtime}/rc/filetype"
#source-here-or-in scss.kak             "%val{runtime}/rc/filetype"
 source-here-or-in sh.kak               "%val{runtime}/rc/filetype"
#source-here-or-in sql.kak              "%val{runtime}/rc/filetype"
#source-here-or-in swift.kak            "%val{runtime}/rc/filetype"
 source-here-or-in systemd.kak          "%val{runtime}/rc/filetype"
#source-here-or-in taskpaper.kak        "%val{runtime}/rc/filetype"
 source-here-or-in toml.kak             "%val{runtime}/rc/filetype"
#source-here-or-in troff.kak            "%val{runtime}/rc/filetype"
#source-here-or-in tupfile.kak          "%val{runtime}/rc/filetype"
#source-here-or-in void-linux.kak       "%val{runtime}/rc/filetype"
 source-here-or-in yaml.kak             "%val{runtime}/rc/filetype"
 source-here-or-in zig.kak              "%val{runtime}/rc/filetype"

#source-here-or-in iterm.kak            "%val{runtime}/rc/windowing"
#source-here-or-in kitty.kak            "%val{runtime}/rc/windowing"
 source-here-or-in new-client.kak       "%val{runtime}/rc/windowing"
#source-here-or-in screen.kak           "%val{runtime}/rc/windowing"
#source-here-or-in tmux.kak             "%val{runtime}/rc/windowing"
 source-here-or-in x11.kak              "%val{runtime}/rc/windowing"
 source-here-or-in detection.kak        "%val{runtime}/rc/windowing"
#source-here-or-in x11.kak              "%val{runtime}/rc/windowing/repl"
#source-here-or-in tmux.kak             "%val{runtime}/rc/windowing/repl"

#source-here-or-in editorconfig.kak     "%val{runtime}/rc/detection"
 source-here-or-in file.kak             "%val{runtime}/rc/detection"
#source-here-or-in modeline.kak         "%val{runtime}/rc/detection"

source-here-or-in   buffers-info.kak           "%val{config}"
source-here-or-in   buffer-switcher.kak        "%val{config}"
source-here-or-in   build.kak                  "%val{config}"
source-here-or-in   expand.kak                 "%val{config}"
source-here-or-in   filetree.kak               "%val{config}"
source-here-or-in   find.kak                   "%val{config}"
source-here-or-in   friendly-session-names.kak "%val{config}"
source-here-or-in   gdb.kak                    "%val{config}"
source-here-or-in   number-comparison.kak      "%val{config}"
source-here-or-in   phantom-selection.kak      "%val{config}"
source-here-or-in   single-process-pipe.kak    "%val{config}"
source-here-or-in   snippets.kak               "%val{config}"
source-here-or-in   sort-selections.kak        "%val{config}"
source-here-or-in   sudo-write.kak             "%val{config}"
source-here-or-in   surround.kak               "%val{config}"
source-here-or-in   vertical-selection.kak     "%val{config}"
source-here-or-in   scrollbar.kak              "%val{config}"

try %{ require-module x11 }

hook global WinCreate .* %{ scrollbar-enable }

set global tabstop 4
set global indentwidth 4
set global BOM none
set global eolformat lf
set global disabled_hooks '.*-(insert|indent)'

set global autoinfo command|onkey
set -add global ui_options terminal_padding_char=╱ # More fancy examples: ▚ ╳ ╱ ┼
set -add global ui_options terminal_padding_fill=yes
set -add global ui_options terminal_set_title=no

set global scrolloff 2,5

# preserve indent level
hook global InsertChar \n %{ try %{ exec -itersel -draft ';K<a-&>' } }

def -hidden backspace-with-indentwidth %{
    eval -itersel %{
        try %{
            # will only succeed at the beginning of the buffer -> nothing to do
            exec -draft ';H<a-k>\A.\z<ret>'
        } catch %{
            # if there is nothing but horizontal whitespace between character to the left and beginning of line,
            # delete in increments of indentwidth
            exec -draft "hGh<a-k>\A[ \t]+\z<ret>s(\t| {1,%opt{indentwidth}})<ret>,d"
        } catch %{
            # regular case, delete previous character
            exec -draft 'hd'
        }
    }
}
map global insert <backspace> '<a-;>: backspace-with-indentwidth<ret>'
map global insert <s-backspace> '<a-;>: backspace-with-indentwidth<ret>'

map global insert <tab> '<a-;><a-gt>'
map global insert <s-tab> '<a-;><lt>'

try %{
    nop %opt{gdb_indicator} %opt{build_modeline_progress} %opt{build_modeline_failure} %opt{build_modeline_success}
    set global modelinefmt '\{%val{cursor_line},%val{cursor_char_column}} %val{bufname} {{mode_info}} {{context_info}} {black,cyan}%opt{build_modeline_progress}{black,green}%opt{build_modeline_success}{black,red}%opt{build_modeline_failure}{default,default} {red,default}%opt{gdb_indicator} {default,default}- %val{client}@[%val{session}]'
} catch %{
    set global modelinefmt '\{%val{cursor_line},%val{cursor_char_column}} %val{bufname} {{mode_info}} {{context_info}} {default,default}- %val{client}@[%val{session}]'
}
try %{ set global makecmd 'make --jobs=8' }
try %{ set global grepcmd 'ag --filename --column --ignore tags --ignore build --ignore buildDebug' }

# TODO: revisit one day
#hook global ModeChange ".*:prompt" %{ face global StatusLine black,green }
#hook global ModeChange ".*:insert" %{ face global StatusLine black,yellow }
#hook global ModeChange ".*:normal" %{ face global StatusLine black,cyan }

map global insert <s-space> <space>
map global insert <s-ret> <ret>

# stop c and d from yanking
map global normal d <a-d>
map global normal c <a-c>
map global normal <a-d> ''
map global normal <a-c> ''

map global normal <space> ','
map global normal ',' <space>
map global normal <a-space> '<a-,>'
map global normal '<a-,>' <a-space>

#swap ; and :
map global normal ';' ':'
map global normal ':' ';'

# tab/backtab to cycle through completions
hook global InsertCompletionShow .* %{
    map window insert <s-tab> <c-p>
    map window insert <tab> <c-n>
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

map global normal q     ': surround<ret>'
map global normal Q     'q'
map global normal <a-q> ': expand<ret>'
map global normal <a-Q> 'Q'

# word-related mappings
map global normal w     <a-i>w
map global normal <a-w> <a-i><a-w>
map global normal W     '"_s.<ret><a-i>w'
map global normal <a-W> '"_s.<ret><a-i><a-w>'

# replace select-onto with phantom-sel stuff; more useful
map global normal f     ': phantom-selection-add-selection<ret>'
map global normal F     ': phantom-selection-select-all; phantom-selection-clear<ret>'
map global normal <a-F> ': phantom-selection-iterate-prev<ret>'
map global normal <a-f> ': phantom-selection-iterate-next<ret>'
map global insert <a-f> '<esc>: phantom-selection-iterate-next<ret>i'
map global insert <a-F> '<esc>: phantom-selection-iterate-prev<ret>i'

# move line up/down
# not very mnemonic but whatever

def -hidden move-lines-down %{ exec -draft 'x<a-_><a-:>Z;ezjxdzP' }
def -hidden move-lines-up %{ exec -draft 'x<a-_><a-:><a-;>Z;bzkxdzp' }

map global normal t     ': move-lines-down<ret>'
map global normal <a-t> ': move-lines-up<ret>'
map global normal T     ''
map global normal <a-T> ''

map global normal <c-a> ': alt<ret>'
map global normal <c-b> ': make<ret>'
map global normal <c-v> ': eval -draft make<ret>'
map global normal <c-w> ': delete-buffer<ret>'
map global normal <c-s> ': write<ret>'
map global normal <c-n> ': edit -scratch<ret>'
map global normal <c-f> ': filetree-switch-or-start<ret>'
map global normal <c-d> ': buffer-switcher<ret>'
map global normal <c-u> ''

define-command mkdir %{ nop %sh{ mkdir -p "$(dirname "$kak_buffile")" } }

face global PrimaryCursorEol black,white+fg
face global SecondaryCursorEol black,white+fg
face global SecondaryCursor black,rgb:babaa3+fg
face global Whitespace rgb:363636+f
face global LineNumbersWrapped rgb:606060,default+i
face global MatchingChar black,yellow+F
face global SearchRegister default+u
face global CurWord default,rgb:3b3b3b

addhl global/ number-lines -hlcursor -separator ' '
addhl global/ show-matching

addhl global/search group
hook global RegisterModified '/' %{
    # the register may not contain a valid regex
    try %{
        addhl -override global/search regex "%reg{/}" 0:SearchRegister
    } catch %{
        addhl -override global/search group
    }
}

addhl global/curword group
# highlight current word
def -hidden update-curword %{
    eval -no-hooks -save-regs / -draft %{
        try %{
            exec -save-regs '' '<a-i>w*'
            addhl -override global/curword regex "%reg{/}" 0:CurWord
        } catch %{
            addhl -override global/curword group
        }
    }
}
hook global NormalIdle '' update-curword
hook global InsertIdle '' update-curword

addhl global/ show-whitespaces
addhl global/ wrap -word -marker "↳ "


def reload-all -docstring "Reload all open buffers" %{
    eval -buffer * edit!
}

def scratch -docstring "Open a scratch buffer" -params ..1 %{
    try %{
        eval %sh{ [ -z "$1" ] && printf fail }
        edit -scratch %arg{1}
    } catch %{
        edit -scratch
    }
}

def kakrc -docstring "Open kakrc"         %{ edit ~/.config/kak/kakrc }
def foot -docstring "Open foot.ini"       %{ edit ~/.config/foot/foot.ini }
def wayfire -docstring "Open wayfire.ini" %{ edit ~/.config/wayfire.ini }
def mpv -docstring "Open mpv.conf"        %{ edit ~/.config/mpv/input.conf ; edit ~/.config/mpv/mpv.conf }
def mvi -docstring "Open mvi.conf"        %{ edit ~/.config/mvi/input.conf ; edit ~/.config/mvi/mpv.conf }
def mmp -docstring "Open mmp.conf"        %{ edit ~/.config/mmp/input.conf ; edit ~/.config/mmp/mpv.conf }
def elvish -docstring "Open rc.elv"       %{ edit ~/.config/elvish/rc.elv }

def -hidden trim-whitespaces -docstring "Remove trailing whitespace from every line" %{
   try %{
        exec -draft '%<a-s>ghgl<a-i><space>d'
        echo -markup "{Information}trimmed"
    } catch %{
        echo -markup "{Information}nothing to trim"
    }
}

# delete the *scratch* buffer as soon as another is created, but only if it's empty
hook global BufCreate '^\*scratch\*$' %{
    exec '%d'
    hook -once -always global BufCreate '^(?!\*scratch\*).*$' %{
        try %{
            # throw if the buffer has more than one character
            exec -buffer *scratch* 'L<a-K>..<ret>'
            db *scratch*
        }
    }
}

hook global GlobalSetOption gdb_session_started=true %{
    map global normal <F10>   ': gdb-next<ret>'
    map global normal <F11>   ': gdb-step<ret>'
    map global normal <s-F11> ': gdb-finish<ret>'
    map global normal <F12>   ': gdb-print<ret>'
    map global normal <F9>    ': gdb-toggle-breakpoint<ret>'
    map global normal <F5>    ': gdb-continue<ret>'
}

hook global GlobalSetOption gdb_session_started=false %{
    unmap global normal <F10>   ': gdb-next<ret>'
    unmap global normal <F11>   ': gdb-step<ret>'
    unmap global normal <s-F11> ': gdb-finish<ret>'
    unmap global normal <F12>   ': gdb-print<ret>'
    unmap global normal <F9>    ': gdb-toggle-breakpoint<ret>'
    unmap global normal <F5>    ': gdb-continue<ret>'
}

def -hidden duplicate-before %{ exec 'y<a-:><a-;>i,<esc>hR' }
def -hidden duplicate-after %{ exec 'y<a-:>li,<esc>hR' }

try %{
    eval %sh{ [ "$XDG_SESSION_TYPE" != wayland ] && printf fail }
    decl -hidden str clipboard_copy_command "wl-copy"
    decl -hidden str clipboard_paste_command "wl-paste -n"
    try %{ set global termcmd 'foot sh -c' }
} catch %{
    decl -hidden str clipboard_copy_command "xsel --input --clipboard"
    decl -hidden str clipboard_paste_command "xsel --output --clipboard"
    try %{ set global termcmd 'kitty sh -c' }
}

map -docstring "select 🡓"             -- global user v     ': vertical-selection-down<ret>'
map -docstring "select 🡑"             -- global user <a-v> ': vertical-selection-up<ret>'
map -docstring "select 🡓🡑"            -- global user V     ': vertical-selection-up-and-down<ret>'
map -docstring "trim whitespaces"     -- global user w     ': trim-whitespaces<ret>'
map -docstring "duplicate selection"  -- global user <a-d> ': duplicate-before<ret>'
map -docstring "duplicate selection"  -- global user d     ': duplicate-after<ret>'
map -docstring "clip-paste after"     -- global user p     "<a-!> %opt{clipboard_paste_command}<ret>"
map -docstring "clip-paste before"    -- global user P     "! %opt{clipboard_paste_command}<ret>"
map -docstring "clip-replace"         -- global user R     "| %opt{clipboard_paste_command}<ret>"
map -docstring "clip-yank"            -- global user y     "<a-|> %opt{clipboard_copy_command}<ret>"
map -docstring "math"                 -- global user m     ': math<ret>'
map -docstring "++"                   -- global user +     'a+1<esc>: math<ret>'
map -docstring "--"                   -- global user -     'a-1<esc>: math<ret>'

try %{ source "%val{config}/dayjob.kak" }

def send-copy-register -params 1 %{
}
